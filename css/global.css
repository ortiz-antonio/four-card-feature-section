/* Modern reset: https://piccalil.li/blog/a-more-modern-css-reset/ */

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */
html {
  text-size-adjust: none;
}

/* Remove default margin in favour of better control in authored CSS */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin-block-end: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role='list'],
ol[role='list'] {
  list-style: none;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  line-height: 1.5;
}

/* Set shorter line heights on headings and interactive elements */
h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentcolor;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */
textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}

/* @font-face here */
@font-face {
  font-family: shantell;
  font-display: swap;
  src: url('../fonts/ShantellSans[BNCE,INFM,SPAC,ital,wght].woff2') format('woff');
}

:root {
  --color-dark: #030303;
  --color-light: #fff;
  --color-primary: #02394A;
  --space-3xs: clamp(0.3125rem, 0.2888rem + 0.1149vw, 0.375rem);
  --space-2xs: clamp(0.5625rem, 0.5151rem + 0.2299vw, 0.6875rem);
  --space-xs: clamp(0.875rem, 0.8039rem + 0.3448vw, 1.0625rem);
  --space-s: clamp(1.125rem, 1.0302rem + 0.4598vw, 1.375rem);
  --space-m: clamp(1.125rem, 1.0302rem + 0.4598vw, 1.375rem);
  --space-l: clamp(2.25rem, 2.0603rem + 0.9195vw, 2.75rem);
  --space-xl: clamp(3.375rem, 3.0905rem + 1.3793vw, 4.125rem);
  --space-2xl: clamp(4.5rem, 4.1207rem + 1.8391vw, 5.5rem);
  --space-3xl: clamp(6.75rem, 6.181rem + 2.7586vw, 8.25rem);
  --space-4xl: clamp(7.875rem, 7.2112rem + 3.2184vw, 9.625rem);
  --space-3xs-2xs: clamp(0.3125rem, 0.1703rem + 0.6897vw, 0.6875rem);
  --space-2xs-xs: clamp(0.5625rem, 0.3728rem + 0.9195vw, 1.0625rem);
  --space-xs-s: clamp(0.875rem, 0.6853rem + 0.9195vw, 1.375rem);
  --space-s-m: clamp(1.125rem, 1.0302rem + 0.4598vw, 1.375rem);
  --space-m-l: clamp(1.125rem, 0.5086rem + 2.9885vw, 2.75rem);
  --space-l-xl: clamp(2.25rem, 1.5388rem + 3.4483vw, 4.125rem);
  --space-xl-2xl: clamp(3.375rem, 2.569rem + 3.908vw, 5.5rem);
  --space-2xl-3xl: clamp(4.5rem, 3.0776rem + 6.8966vw, 8.25rem);
  --space-3xl-4xl: clamp(6.75rem, 5.6595rem + 5.2874vw, 9.625rem);
  --space-s-l: clamp(1.125rem, 0.5086rem + 2.9885vw, 2.75rem);
  --space-xs-m: clamp(0.875rem, 0.6853rem + 0.9195vw, 1.375rem);
  --size-step-5: clamp(2.5197rem, 1.8837rem + 3.0832vw, 4.1962rem);
  --size-step-4: clamp(2.1444rem, 1.6845rem + 2.23vw, 3.3569rem);
  --size-step-3: clamp(1.825rem, 1.4986rem + 1.5826vw, 2.6855rem);
  --size-step-2: clamp(1.5532rem, 1.3274rem + 1.0947vw, 2.1484rem);
  --size-step-1: clamp(0.9574rem, 0.9034rem + 0.2622vw, 1.1rem);
  --size-step-0: clamp(1.125rem, 1.0302rem + 0.4598vw, 1.375rem);
  --leading-flat: 1;
  --leading-fine: 1.15;
  --leading-loose: 1.7;
  --font-base: shantell,segoe ui,roboto,helvetica neue,arial,sans-serif;
  --font-regular: 400;
  --font-medium: 500;
  --font-bold: 700;
  --gutter: var(--space-s-l);
  --transition-base: 250ms ease;
  --transition-movement: 200ms linear;
  --transition-fade: 300ms ease;
  --transition-bounce: 500ms cubic-bezier(0.5, 0.05, 0.2, 1.5);
  --leading-standard: 1.5;
  --wrapper-max-width: 60rem;
}

/* 
  Global styles 

  Low-specificity, global styles that apply to the whole 
  project: https://cube.fyi/css.html
*/
body {
  background: var(--color-light);
  color: var(--color-dark);
  font-size: var(--size-step-0);
  font-family: var(--font-base);
  line-height: var(--leading-standard);
}

.prose {
  --flow-space: var(--space-m);
}

/*
CLUSTER
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start) How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-m));
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: var(--cluster-vertical-alignment, center);
}

/* 
FLOW COMPOSITION 
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/quick-tip/flow-utility/ 
*/
.flow > * + * {
  margin-top: var(--flow-space, 1em);
}

/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */
.grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(var(--grid-min-item-size, 16rem), 1fr)
  );
  gap: var(--gutter, var(--space-s-l));
}

/* A split 50/50 layout */
.grid[data-layout='halves'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 33rem);
}

/* Three column grid layout */
.grid[data-layout='thirds'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 33%, 20rem);
}

/*
REPEL
A little layout that pushes items away from each other where
there is space in the viewport and stacks on small viewports

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--repel-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.repel {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: var(--repel-vertical-alignment, center);
  gap: var(--gutter, var(--space-s-m));
}

.repel[data-nowrap] {
  flex-wrap: nowrap;
}

/* 
SIDEBAR
More info: https://every-layout.dev/layouts/sidebar/
A layout that allows you to have a flexible main content area
and a "fixed" width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width *and* the main content minimum width, they will stack
on top of each other

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between the sidebar and main content.

--sidebar-target-width (20rem): How large the sidebar should be

--sidebar-content-min-width(50%): The minimum size of the main content area

EXCEPTIONS
.sidebar[data-direction='rtl']: flips the sidebar to be on the right 
*/
.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
}

.sidebar > :first-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}

.sidebar > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}

/*
SWITCHER
More info: https://every-layout.dev/layouts/switcher/
A layout that allows you to lay **2** items next to each other
until there is not enough horizontal space to allow that.

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between each item

--switcher-target-container-width (40rem): How large the container
needs to be to allow items to sit inline with each other

--switcher-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
  align-items: var(--switcher-vertical-alignment, flex-start);
}

.switcher > * {
  flex-grow: 1;
  flex-basis: calc((var(--switcher-target-container-width, 40rem) - 100%) * 999);
}

/* Max 2 items,
so anything greater than 2 is full width */
.switcher > :nth-child(n + 3) {
  flex-basis: 100%;
}

/*
WRAPPER COMPOSITION 
A common wrapper/container
*/
.wrapper {
  margin-inline: auto;
  max-width: clamp(16rem, var(--wrapper-max-width, 100vw), 80rem);
  padding-left: var(--gutter);
  padding-right: var(--gutter);
  position: relative;
}

/* 
REGION UTILITY
Consistent block padding for page sections
*/
.region {
  padding-block: var(--region-space, var(--space-xl-2xl));
}

/* 
VISUALLY HIDDEN UTILITY
Info: https://piccalil.li/quick-tip/visually-hidden/ 
*/
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 0;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

.block {
  display: block;
}

.text-primary {
  color: #02394A;
}
